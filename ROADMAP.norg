@document.meta
title: Neorg Query
description: A database for your notes with an eventual query language
authors: benlubas
categories: [
    projects
    readme
]
created: 2024-11-27T15:53:11-0500
updated: 2024-12-15T20:48:56-0500
version: 1.1.1
@end

* neorg-query

  (Planned) Features:
  - (x) Persistent LibSQL database that tracks file metadata for each file
  - (x) Parse files with rust-norg parser
  - (x) Update the database on launch
  -- (x) store file modified dates probably
  -- (x) remove files that are deleted
  -- (x) add/parse files that are new
  - (x) Watch current workspace and update on file changes
  - (x) `#sql` tag that populates on `:Neorg query run`
  - (x) format strings
  -- (x) modifiers
  -- ( ) auto format based on available fields
  - ( ) Task support
  -- ( ) `tasks` table
  -- this could noticeably increase the parse time
  - ( ) improve multi threaded parsing performance
  - ( ) Possible optional plaintext support for vector search and specific paragraph
        retrieval. This would increase the size of the DB by a lot

** Custom Query Building
   Eventually, we'd like to create a custom query language that makes it easier to
   construct queries. I've begun to look pat how obsidian queries and data view
   queries work, but still definitely want to talk more about this.

   Instead of a `#sql` tag, these will use `#query`, or even `#task` if we create
   a simplified query language for tasks.

*** Pros and Cons of SQL
    *Pros:*
    - Implementation is super simple. We literally just take the raw query from the
      user, and run it. No syntax parsing, no nothing.
    - Familiarity, most all devs have used SQL before

    *Cons:*
    - overly verbose
    - sql queries in general have some weird design flaws
    - joins are annoying to write
    - `path LIKE '%/folder/%'` is at least 6 too many chars to communicate that I want
      things in the `folder` folder

